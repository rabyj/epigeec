name: Build Wheels

on:
  pull_request: # Run on all PRs, decide what to build inside the workflow
  release:
    types: [published]
  push:
    branches:
      - test-publish # Push here for quick build and publish to TestPyPI
      - test-build-full # Push here for full build tests
      - test-build-quick # Push here for quick build tests

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Continue building other platforms if one fails
      matrix:
        include:
          - os: ubuntu-latest
            cibw_archs: "x86_64 aarch64"

          - os: macos-13 # Intel Mac for x86_64 - could not build without specifying 13.0
            cibw_archs: "x86_64"
            deployment_target: "13.0"
            needs_cpp: true

          - os: macos-14 # Apple Silicon - could not build without specifying 14.0
            cibw_archs: "arm64"
            deployment_target: "14.0"
            needs_cpp: true

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # full history with tags for setuptools_scm

      # Explicitly checks branch names and event types
      # to correctly determine if a full or quick build is needed.
      - name: Check if full build needed
        id: check
        run: |
          full_build=false
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "Release event detected. Forcing full build."
            full_build=true
          elif [[ "${{ github.ref_name }}" == "test-build-full" ]]; then
            echo "Push to '${{ github.ref_name }}' branch. Forcing full build."
            full_build=true
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Pull request detected. Checking for C++ file changes."
            # safer diff for forked PRs
            git fetch origin ${{ github.base_ref }} --depth=1
            if git diff --name-only FETCH_HEAD...HEAD | grep -qE '^(third_party/|epigeec/cc/)'; then
              echo "C++ files were modified. Forcing full build."
              full_build=true
            else
              echo "No C++ files modified. Using quick build."
            fi
          else
            echo "Defaulting to quick build for branch '${{ github.ref_name }}'."
          fi
          echo "full_build=$full_build" >> $GITHUB_OUTPUT

      - name: Set up QEMU (for ARM on Linux)
        if: |
          runner.os == 'Linux' &&
          steps.check.outputs.full_build == 'true' &&
          contains(matrix.cibw_archs, 'aarch64')
        uses: docker/setup-qemu-action@v3

      - name: Build wheels
        if: |
          !matrix.needs_cpp ||
          steps.check.outputs.full_build == 'true'
        uses: pypa/cibuildwheel@v3.2.1
        with:
          output-dir: dist
          config-file: pyproject.toml
        env:
          # Only build x86_64 and Python 3.11 for quick builds
          CIBW_ARCHS: ${{ steps.check.outputs.full_build == 'true' && matrix.cibw_archs || 'x86_64' }}
          CIBW_BUILD: ${{ steps.check.outputs.full_build == 'true' && '' || 'cp311-*' }}
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.deployment_target || '' }}

      # Create a sanitized string for the artifact name
      # Since we can't use 'replace' directly in the upload-artifact name field
      - name: Generate artifact name
        id: artifact_name
        shell: bash
        run: |
          archs="${{ matrix.cibw_archs }}"
          echo "arch_string=${archs// /-}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        if: |
          !env.ACT &&
          (!matrix.needs_cpp || steps.check.outputs.full_build == 'true')
        with:
          name: wheels-${{ matrix.os }}-${{ steps.check.outputs.full_build == 'true' && steps.artifact_name.outputs.arch_string || 'x86_64' }}
          path: dist/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build sdist
        run: pipx run build --sdist --outdir dist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish_testpypi:
    name: Publish to TestPyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test-publish' # Only run on test-publish
    environment:
      name: testpypi
      url: https://test.pypi.org/p/epigeec
    permissions:
      id-token: write # For trusted publishing

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  publish_pypi:
    name: Publish to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/epigeec
    permissions:
      id-token: write # For trusted publishing

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
